{"version":3,"sources":["services/DataService.tsx","services/ErrorHandler.tsx","services/QueryHelper.tsx","pages/components/CompanyItem.tsx","pages/components/LoadingComponent.tsx","services/CompaniesAtom.tsx","pages/components/ChartComponent.tsx","pages/components/MapComponent.tsx","pages/components/CompaniesListing.tsx","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getUrl","route","GetCompanyLogoUrl","companyKey","getAsync","a","url","fetch","response","ok","Error","json","data","HandleError","error","window","alert","DialogType","queryDataState","atom","key","default","parameters","URLSearchParams","location","search","cmp","get","dialog","dialogData","dlg","Boolean","splitted","split","length","Map","fuelKey","Chart","openedCompanyKeys","getQueryData","isCompanyOpenedSelector","selectorFamily","param","some","c","set","isOpen","x","Array","from","Set","filter","chartDataSelector","selector","newData","mapDataSelector","getSign","number","CompanyItem","props","company","useRecoilState","setIsOpen","collapseRef","useRef","collapseObjRef","isAnimatingRef","useEffect","current","addEventListener","collapse","Collapse","toggle","show","hide","setDisplayChart","useSetRecoilState","setDisplayMap","className","style","margin","onClick","alignItems","display","flexDirection","padding","justifyContent","cursor","src","alt","width","height","marginRight","name","type","backgroundColor","color","borderColor","title","e","stopPropagation","marginLeft","ref","borderTop","scope","textAlign","fuels","map","f","i","price","toFixed","change","Math","abs","LoadingComponent","role","loadingText","CompaniesAtom","getDateWithoutTime","dateStr","vals","Date","Number","register","registerables","ChartRangeType","monthes","ChartItem","originalData","useState","all","chartRange","setChartRange","dateRangesStr","setDateRangesStr","canvasRef","chartRef","date","mappedData","toJSON","chartData","chartLabels","currItem","nextItem","getTime","dateTracker","push","getDate","getMonth","getFullYear","toString","substring","setDate","pastYear","splice","pastMonth","destroy","labels","datasets","label","stepped","pointBackgroundColor","options","responsive","maintainAspectRatio","plugins","legend","scales","y","grace","ticks","callback","value","index","values","aria-label","flexGrow","ChartComponent","setChartData","companies","useRecoilValue","modalRef","modal","Modal","getInstance","event","allHistory","setAllHistory","chartKeyRef","chartKey","resp","find","fuel","data-bs-backdrop","data-bs-keyboard","tabIndex","aria-labelledby","aria-hidden","data-bs-dismiss","MapItem","mapDivRef","setMap","markers","setMarkers","google","maps","center","lat","lng","zoom","minZoom","svgMarker","path","fillColor","fillOpacity","strokeWeight","rotation","scale","anchor","Point","Marker","position","LatLng","address","icon","latlngbounds","LatLngBounds","forEach","m","extend","getPosition","setCenter","getCenter","fitBounds","MapComponent","mapData","setMapData","locations","setLocations","mapKeyRef","mapKey","CompaniesListing","setCompanies","history","useHistory","queryData","lastSetUrlRef","newUrl","searchParams","join","dialogParam","getFreshUrl","replace","HomePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a65f0910.chunk.js","sourcesContent":["import Company from \"../models/Company\";\nimport PinPoint from \"../models/PinPoint\";\nimport PricePoint from \"../models/PricePoint\";\n\nconst baseUrl = \"https://raw.githubusercontent.com/mister-giga/Fuel-Georgia/main\";\nconst getUrl = (route:string):string => `${baseUrl}/${route}`;\n\nexport function GetCompanyLogoUrl(companyKey:string){\n    return getUrl(`blob/${companyKey}.png`);\n}\n\nasync function getAsync<T> (route:string):Promise<T> {\n    const url = getUrl(route);\n    const response = await fetch(url);\n    if(!response.ok){\n        throw new Error('მოხდა შეცდომა');\n    }\n    const data = await response.json();\n    return data;\n}\n\nexport function GetCompaniesAsync() {\n    return getAsync<Company[]>(\"data/companies.json\");\n}\n\nexport function GetLocationsAsync(companyKey:string){\n    return getAsync<PinPoint[]>(`data/${companyKey}/locations.json`);\n}\n\nexport function GetPriceChangesAsync(companyKey:string, fuelKey:string){\n    return getAsync<PricePoint[]>(`data/${companyKey}/priceChanges/${fuelKey}.json`);\n}","export default function HandleError(error:string){\n    window.alert(error);\n}","import { atom, selector, selectorFamily } from \"recoil\";\n\nexport interface MapDialogData{\n    companyKey:string\n}\nexport interface ChartDialogData extends MapDialogData {\n    fuelKey:string\n}\n\nexport enum DialogType { Map = 'map', Chart = 'chart' }\n\nexport interface QueryData {\n    openedCompanyKeys:string[],\n    dialog: DialogType|null,\n    dialogData: MapDialogData | ChartDialogData | null\n}\n\nfunction getQueryData():QueryData{\n    const parameters = new URLSearchParams(window.location.search);\n\n    const cmp = parameters.get('cmp');\n\n    let dialog : DialogType|null = null;\n    let dialogData : MapDialogData | ChartDialogData | null = null\n\n    const dlg = parameters.get('dlg');\n\n    if(Boolean(dlg)){\n        const splitted = dlg!.split('.');\n        if(splitted.length === 2 && splitted[0] === 'map'){\n            const companyKey = splitted[1];\n            if(Boolean(companyKey)){\n                dialog = DialogType.Map;\n                dialogData = {\n                    companyKey: companyKey\n                }\n            }\n        } else if(splitted.length === 3 && splitted[0] === 'chart'){\n            const companyKey = splitted[1];\n            const fuelKey = splitted[2];\n            if(Boolean(companyKey) && Boolean(fuelKey)){\n                dialog = DialogType.Chart;\n                dialogData = {\n                    companyKey: companyKey,\n                    fuelKey: fuelKey\n                }\n            }\n        }\n    }\n\n    return {\n        openedCompanyKeys: Boolean(cmp) ? cmp!.split('.') : [],\n        dialog: dialog,\n        dialogData: dialogData\n    }\n}\n\nexport function getFreshUrl(data:QueryData) {\n    var searchParams = new URLSearchParams(window.location.search);\n    searchParams.set(\"cmp\", data.openedCompanyKeys.join('.'));\n\n    let dialogParam = \"\";\n    if(data.dialog){\n        if(data.dialog === DialogType.Map){\n            dialogParam = `map.${data.dialogData?.companyKey}`;\n        } else if(data.dialog === DialogType.Chart){\n            dialogParam = `chart.${data.dialogData?.companyKey}.${(data.dialogData as ChartDialogData)?.fuelKey}`;\n        }\n    }\n    searchParams.set('dlg', dialogParam);\n\n    const url = \"?\" + searchParams.toString();\n    return url;\n}\n\n\nexport const queryDataState = atom<QueryData>({\n    key: 'queryDataState', \n    default: getQueryData(), \n});\n\nexport const isCompanyOpenedSelector = selectorFamily<boolean, string>({\n    key:'isCompanyOpenedSelector',\n    get: param => ({get})=> get(queryDataState).openedCompanyKeys.some(c=>c === param),\n    set: companyKey => ({get, set}, isOpen) => {\n        const x =  get(queryDataState);\n        set(queryDataState, {...x, openedCompanyKeys: isOpen ? Array.from(new Set([...x.openedCompanyKeys, companyKey])): x.openedCompanyKeys.filter(c=>c!== companyKey)});\n    }\n})\n\nexport const chartDataSelector = selector<ChartDialogData|null>({\n    key: 'chartDataSelector',\n    get: ({get}) => {\n        const data = get(queryDataState);\n        if(data.dialog === DialogType.Chart){\n            return data.dialogData as ChartDialogData;\n        }\n        return null;\n    },\n    set: ({get, set}, newData) => {\n        const data = get(queryDataState);\n        if(newData === null) {\n            set(queryDataState, {...data, dialog: null, dialogData: null})\n        } else {\n            set(queryDataState, {...data, dialog: DialogType.Chart, dialogData: newData as ChartDialogData});\n        }\n    }\n});\n\nexport const mapDataSelector = selector<MapDialogData|null>({\n    key: 'mapDataSelector',\n    get: ({get}) => {\n        const data = get(queryDataState);\n        if(data.dialog === DialogType.Map){\n            return data.dialogData as MapDialogData;\n        }\n        return null;\n    },\n    set: ({get, set}, newData) => {\n        const data = get(queryDataState);\n        if(newData === null) {\n            set(queryDataState, {...data, dialog: null, dialogData: null})\n        } else {\n            set(queryDataState, {...data, dialog: DialogType.Map, dialogData: newData as MapDialogData});\n        }\n    }\n});\n\n// export const isDisplayingChartSelector = selectorFamily<boolean, {companyKey:string, fuelKey:string}>({\n//     key: 'isDisplayingChartSelector',\n//     get: param => ({get}) => {\n//         const data = get(queryDataState);\n//         if(data.dialog === DialogType.Chart){\n//             const dialogData = data.dialogData as ChartDialogData;\n//             if(dialogData.companyKey === param.companyKey && dialogData.fuelKey === param.fuelKey){\n//                 return true;\n//             }\n//         }\n//         return false;\n//     },\n//     set: chartData => ({get, set}, wantsToDisplay) => {\n//         const data = get(queryDataState);\n//         if(wantsToDisplay){\n//             set(queryDataState, {...data, dialog: DialogType.Chart, dialogData: chartData});\n//         } else {\n//             //maybe check if this is the one who opened chart?\n//             set(queryDataState, {...data, dialog: null, dialogData: null});\n//         }\n//     }\n// });","import { Collapse } from 'bootstrap';\nimport React, {  useEffect, useRef } from 'react'\nimport {  useRecoilState, useSetRecoilState } from 'recoil';\nimport Company from '../../models/Company';\nimport { GetCompanyLogoUrl } from '../../services/DataService';\nimport { chartDataSelector, isCompanyOpenedSelector, mapDataSelector } from '../../services/QueryHelper';\n\nfunction getSign(number:number){\n    if(number>0)\n        return '+';\n    if(number<0)\n        return '-';\n    return '';\n}\nfunction getBadgeClass(number:number){\n    if(number>0)\n        return 'bg-danger';\n    if(number<0)\n        return 'bg-success';\n    return 'bg-secondary';\n}\n\nexport default function CompanyItem(props:{company:Company}){\n    const { company } = props;\n    const [isOpen, setIsOpen] = useRecoilState(isCompanyOpenedSelector(company.key));\n    \n    const collapseRef = useRef<HTMLDivElement|null>(null);\n    const collapseObjRef = useRef<Collapse|null>(null);\n    const isAnimatingRef = useRef<boolean>(false);\n    useEffect(()=>{\n        if(collapseRef.current){\n            if(collapseObjRef.current === null){\n                collapseRef.current.addEventListener('shown.bs.collapse', function () {\n                    isAnimatingRef.current = false;\n                });\n                collapseRef.current.addEventListener('hidden.bs.collapse', function () {\n                    isAnimatingRef.current = false;\n                });\n                collapseRef.current.addEventListener('show.bs.collapse', function () {\n                    isAnimatingRef.current = true;\n                });\n                collapseRef.current.addEventListener('hide.bs.collapse', function () {\n                    isAnimatingRef.current = true;\n                });\n                const collapse = collapseObjRef.current ?? new Collapse(collapseRef.current, { toggle: isOpen });\n                collapseObjRef.current = collapse;\n            } else {\n                const collapse = collapseObjRef.current;\n                if(isOpen){\n                    collapse.show();\n                } else {\n                    collapse.hide();\n                }\n            }            \n        }\n    },[isOpen]);\n\n    const setDisplayChart = useSetRecoilState(chartDataSelector);\n    const setDisplayMap = useSetRecoilState(mapDataSelector);\n\n    const onOpenClose = () => !isAnimatingRef.current && setIsOpen(x=>!x);\n\n    return (\n        <div className=\"card mb-3\" style={{ margin:'10px' }}>\n            \n            <div onClick={onOpenClose} style={{alignItems:'center', display:'flex', flexDirection:'row', padding:'16px', justifyContent:'space-between', cursor:'pointer'}}>\n                <div style={{display:'flex', flexDirection:'row', alignItems:'center'}}>\n                    <img src={GetCompanyLogoUrl(company.key)} alt={`${company.key} logo`} width='50' height='50' style={{marginRight:'16px'}}/>\n                    <h3 style={{padding:'0'}}>{company.name}</h3>\n                </div>\n                <div style={{display:'flex', flexDirection:'row', alignItems:'center'}}>\n                    <button type=\"button\" className=\"btn btn-primary\" style={{backgroundColor:company.color, borderColor:company.color, marginRight:'10px'}} title='რუკა' onClick={(e)=>{e.stopPropagation(); setDisplayMap({companyKey:company.key});}}><i className=\"fas fa-map-marked-alt\"></i></button>\n                    <i className={`fas fa-chevron-${isOpen ? 'up' : 'down'}`} style={{marginLeft:'10px', marginRight:'10px'}}></i>\n                </div>\n            </div>\n            \n            <div ref={collapseRef} className='collapse'>\n                <table className=\"table table-striped table-hover\" style={{borderTop:'1px solid rgba(0,0,0,.125)'}}>\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">საწვავი</th>\n                            <th scope=\"col\">ფასი</th>\n                            <th scope=\"col\" style={{textAlign:'center'}}>+/-</th>\n                            <th scope=\"col\"></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {company.fuels.map((f,i)=> (\n                            <tr key={f.key}>\n                                <th scope=\"row\">{i+1}</th>\n                                <td>{f.name}</td>\n                                <td>{f.price.toFixed(2)}</td>\n                                <td style={{textAlign:'center'}}><span className={`badge ${getBadgeClass(f.change)}`}>{getSign(f.change)}{Math.abs(f.change).toFixed(2)}</span></td>\n                                <td style={{textAlign:'end'}}><button type=\"button\" onClick={()=>setDisplayChart({companyKey:company.key, fuelKey:f.key})} className=\"btn btn-sm btn-secondary\" title='ისტორიის გრაფიკულად ნახვა'><i className=\"fas fa-chart-line\"></i></button></td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n}","import React from 'react'\n\nexport default function LoadingComponent(props:{loadingText:string}){\n    return (\n        <div className=\"horizontallyCentered\">\n            <div className=\"spinner-border text-success\" role=\"status\">\n                <span className=\"visually-hidden\"></span>\n            </div>\n            <p className=\"lead\">{props.loadingText}</p>\n        </div>\n    );\n}","import { atom } from \"recoil\";\nimport Company from '../models/Company';\n\nexport const CompaniesAtom = atom<Company[]|null>({\n    key: \"companiesAtom\",\n    default: null\n});\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { chartDataSelector } from '../../services/QueryHelper'\nimport { Modal } from 'bootstrap'\nimport { CompaniesAtom } from '../../services/CompaniesAtom';\nimport { GetCompanyLogoUrl, GetPriceChangesAsync } from '../../services/DataService';\nimport PricePoint from '../../models/PricePoint';\nimport LoadingComponent from './LoadingComponent';\nimport HandleError from '../../services/ErrorHandler';\nimport { Chart,registerables } from 'chart.js';\nChart.register(...registerables);\n\nfunction getDateWithoutTime(dateStr:string):Date{\n    const vals = dateStr.split('T')[0].split('-');\n    return new Date(Number(vals[0]), Number(vals[1]), Number(vals[2]));\n}\n\nconst monthes = ['იან', 'თებ', 'მარ', 'აპრ', 'მაი', 'ივნ', 'ივლ', 'აგვ', 'სექ', 'ოქტ', 'ნოე', 'დეკ'];\n\nfunction dateToString(date:Date):string{\n    return `${date.getDate()} ${monthes[date.getMonth()]} ${date.getFullYear().toString().substring(2)}`;\n}\n\nenum ChartRangeType { all, pastYear, pastMonth }\n\nfunction ChartItem(props:{originalData:PricePoint[],color:string}){\n    const { originalData, color } = props;\n    const [chartRange, setChartRange] = useState<ChartRangeType>(ChartRangeType.all);\n\n    const [dateRangesStr, setDateRangesStr] = useState('');\n\n    const canvasRef = useRef<HTMLCanvasElement|null>(null);\n    const chartRef = useRef<Chart<\"line\", Number[], String>|null>(null);\n    \n    useEffect(()=>{\n        const data = originalData;\n\n        if(data.length){\n            const mappedData = [...data.map(x=>({\n                date: getDateWithoutTime(x.date),\n                price: x.price\n            })), {\n                date: getDateWithoutTime(new Date().toJSON()),\n                price:data[data.length - 1].price\n            }]\n\n            let chartData:Number[] = [];\n            let chartLabels:String[] = [];\n            \n            \n            for(let i = 0; i < mappedData.length - 1; i++){\n                const currItem = mappedData[i];\n                const nextItem = mappedData[i+1].date.getTime();\n\n                if(currItem.date.getTime() >= nextItem) continue;\n\n                let dateTracker = currItem.date;\n                while(dateTracker.getTime() < nextItem){\n                    chartData.push(currItem.price);\n                    chartLabels.push(dateToString(currItem.date));\n                    dateTracker.setDate(dateTracker.getDate() + 1)\n                }\n            }\n\n            if(chartRange === ChartRangeType.pastYear){\n                if(chartData.length > 365){\n                    chartData = chartData.splice(chartData.length - 365);\n                    chartLabels = chartLabels.splice(chartLabels.length - 365);\n                }\n            } else if(chartRange === ChartRangeType.pastMonth){\n                if(chartData.length > 31){\n                    chartData = chartData.splice(chartData.length - 31);\n                    chartLabels = chartLabels.splice(chartLabels.length - 31);\n                }\n            }\n\n            setDateRangesStr(`${chartLabels[0]} - ${chartLabels[chartLabels.length - 1]}`);\n            \n            chartRef.current?.destroy();\n            chartRef.current = new Chart(canvasRef.current!, {\n                type: 'line',\n                data: {\n                    labels: chartLabels,\n                    datasets: [{\n                        label: 'GEL',\n                        data: chartData,\n                        stepped: 'before',\n                        borderColor:color,\n                        pointBackgroundColor:'white'\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins:{\n                        legend:{\n                            display:false\n                        }\n                    },\n                    scales:{\n                        y:{\n                            type:'linear',\n                            grace:'5%',\n                            ticks:{\n                                callback:function (value, index, values) {\n                                    return `${Number(value).toFixed(2)}`\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    },[originalData, chartRange, color]);\n\n    return <div style={{height:'100%', display:'flex', flexDirection:'column'}}>\n        <div style={{display:'flex', flexDirection:'row', alignItems:'center', padding:'5px', justifyContent:'center'}}>\n            <h6 style={{margin:'0', padding:'0', marginRight:'10px'}}>{dateRangesStr}</h6>\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic radio toggle button group\">\n                <button className={`btn btn-outline-secondary ${chartRange === ChartRangeType.all ? 'active' : ''}`} onClick={()=>setChartRange(ChartRangeType.all)}>ყველა</button>\n\n                <button className={`btn btn-outline-secondary ${chartRange === ChartRangeType.pastYear ? 'active' : ''}`} onClick={()=>setChartRange(ChartRangeType.pastYear)}>1 წლის</button>\n\n                <button className={`btn btn-outline-secondary ${chartRange === ChartRangeType.pastMonth ? 'active' : ''}`} onClick={()=>setChartRange(ChartRangeType.pastMonth)}>1 თვის</button>\n            </div>\n        </div>\n        <div style={{flexGrow:1}}>\n            <canvas ref={canvasRef} width=\"400\" height=\"400\" />\n        </div>\n    </div>\n}\n\nexport default function ChartComponent(){\n    const [chartData, setChartData] = useRecoilState(chartDataSelector);\n    const companies = useRecoilValue(CompaniesAtom);\n\n    const modalRef = useRef<HTMLDivElement>(null);\n\n    useEffect(()=>{\n        if(chartData !== null && modalRef.current !== null && companies !== null){\n            let modal = Modal.getInstance(modalRef.current, {  });\n            if(modal === null){\n                modal = new Modal(modalRef.current);\n                modalRef.current.addEventListener('hidden.bs.modal', function (event) {\n                    setChartData(null);\n                });\n            } \n            modal.show();\n        }\n    },[chartData, setChartData, companies]);\n\n    const [allHistory, setAllHistory] = useState<PricePoint[]|null>(null);\n    const chartKeyRef = useRef<string|null>(null);\n\n    useEffect(()=>{\n        const chartKey = chartData === null ? null : `${chartData.companyKey}.${chartData.fuelKey}`;\n        chartKeyRef.current = chartKey;\n        if(chartKey !== null){\n            (async () => {\n                try {\n                    const resp = await GetPriceChangesAsync(chartData!.companyKey, chartData!.fuelKey);\n                    if(resp?.length && chartKey === chartKeyRef.current){\n                        setAllHistory(resp);\n                    }\n                } catch (ex){\n                    HandleError(ex);\n                }\n            })();\n        } else {\n            setAllHistory(null);\n        }\n    }, [chartData]);\n\n    const company = companies?.find(c=>c.key === chartData?.companyKey);\n    const fuel = company?.fuels?.find(c=>c.key === chartData?.fuelKey);\n    if(!Boolean(fuel)){\n        return <></>;\n    }\n\n    \n\n    return (\n        <div className=\"modal fade\" ref={modalRef} data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabIndex={-1} aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-fullscreen\"> \n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h3 className=\"modal-title\">\n                            <img src={GetCompanyLogoUrl(company!.key)} alt={`${company!.key} logo`} width='50' height='50' style={{marginRight:'16px'}}/>\n                            {`${company?.name} - ${fuel?.name}`}\n                        </h3>\n                        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div className=\"modal-body\" style={{padding:'0'}}>\n                        { allHistory === null ? <LoadingComponent loadingText='იტვირთება საწვავის ისტორია...'/> : <ChartItem color={company!.color} originalData={allHistory}/> }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import { Modal } from 'bootstrap';\nimport React, { useEffect, useRef, useState } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport PinPoint from '../../models/PinPoint';\nimport { CompaniesAtom } from '../../services/CompaniesAtom';\nimport { GetCompanyLogoUrl, GetLocationsAsync } from '../../services/DataService';\nimport HandleError from '../../services/ErrorHandler';\nimport { mapDataSelector } from '../../services/QueryHelper';\nimport LoadingComponent from './LoadingComponent';\n\nfunction MapItem(props:{originalData:PinPoint[],color:string}){\n    const { originalData, color } = props;\n    const mapDivRef = useRef<HTMLDivElement|null>(null);\n    const [ map, setMap] = useState<google.maps.Map|null>(null);\n    const [markers, setMarkers] = useState<google.maps.Marker[]>([]);\n\n    useEffect(()=>{\n        setMap(new google.maps.Map(mapDivRef.current!, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n            minZoom: 8\n        }));\n    },[]);\n\n    useEffect(()=>{\n        if(map !== null){\n            const svgMarker = {\n                path:\"m12 0c-4.962 0-9 4.066-9 9.065 0 7.103 8.154 14.437 8.501 14.745.143.127.321.19.499.19s.356-.063.499-.189c.347-.309 8.501-7.643 8.501-14.746 0-4.999-4.038-9.065-9-9.065zm0 14c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z\",\n                fillColor: color,\n                fillOpacity: 0.9,\n                strokeWeight: 0,\n                rotation: 0,\n                scale: 2,\n                anchor: new google.maps.Point(15, 30),\n            };\n            setMarkers(originalData.map(x=>new google.maps.Marker({\n                position: new google.maps.LatLng({\n                    lat: x.lat,\n                    lng: x.lng\n                }),\n                map,\n                title: x.address,\n                icon: svgMarker\n              })));\n        }\n    }, [map, originalData, color]);\n\n    useEffect(()=>{\n        if(map !== null && markers.length){\n\n            // const clusterer = new MarkerClusterer(map, markers, {\n            //     imagePath:\n            //       \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n            //   });\n\n            var latlngbounds = new google.maps.LatLngBounds();\n\n            markers.forEach(m => {\n                latlngbounds.extend(m.getPosition()!)\n            });     \n\n            map.setCenter(latlngbounds.getCenter());\n            map.fitBounds(latlngbounds);\n\n            return () => {\n                markers.forEach(m=>m.setMap(null));\n            }\n        }\n    },[map, markers]);\n\n    return <div style={{height:'100%'}} ref={mapDivRef}/>\n}\n\nexport default function MapComponent(){\n    const [mapData, setMapData] = useRecoilState(mapDataSelector);\n    const companies = useRecoilValue(CompaniesAtom);\n    \n    const modalRef = useRef<HTMLDivElement>(null);\n\n    useEffect(()=>{\n        if(mapData !== null && modalRef.current !== null && companies !== null){\n            let modal = Modal.getInstance(modalRef.current, {  });\n            if(modal === null){\n                modal = new Modal(modalRef.current);\n                modalRef.current.addEventListener('hidden.bs.modal', function (event) {\n                    setMapData(null);\n                });\n            } \n            modal.show();\n        }\n    },[mapData, setMapData, companies]);\n\n    const [locations, setLocations] = useState<PinPoint[]|null>(null);\n    const mapKeyRef = useRef<string|null>(null);\n\n    useEffect(()=>{\n        const mapKey = mapData === null ? null : mapData.companyKey;\n        mapKeyRef.current = mapKey;\n        if(mapKey !== null){\n            (async () => {\n                try {\n                    const resp = await GetLocationsAsync(mapData!.companyKey);\n                    if(resp?.length && mapKey === mapKeyRef.current){\n                        setLocations(resp);\n                    }\n                } catch (ex){\n                    HandleError(ex);\n                }\n            })();\n        } else {\n            setLocations(null);\n        }\n    }, [mapData]);\n\n    const company = companies?.find(c=>c.key === mapData?.companyKey);\n    if(!Boolean(company)){\n        return <></>;\n    }\n\n    return (\n        <div className=\"modal fade\" ref={modalRef} data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabIndex={-1} aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-fullscreen\"> \n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h3 className=\"modal-title\">\n                            <img src={GetCompanyLogoUrl(company!.key)} alt={`${company!.key} logo`} width='50' height='50' style={{marginRight:'16px'}}/>\n                            {`${company?.name} - მისამართები`}\n                        </h3>\n                        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div className=\"modal-body\" style={{padding:'0'}}>\n                        { locations === null ? <LoadingComponent loadingText='იტვირთება სადგურების მისამართები...'/> : <MapItem originalData={locations} color={company!.color}/> }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React, { useEffect, useRef } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { GetCompaniesAsync } from '../../services/DataService';\nimport HandleError from '../../services/ErrorHandler';\nimport { getFreshUrl, queryDataState } from '../../services/QueryHelper';\nimport CompanyItem from './CompanyItem';\nimport LoadingComponent from './LoadingComponent';\nimport ChartComponent from './ChartComponent'\nimport { CompaniesAtom } from '../../services/CompaniesAtom'\nimport MapComponent from './MapComponent';\n\nexport default function CompaniesListing(){\n    const [companies, setCompanies] = useRecoilState(CompaniesAtom);// useState<Company[]|null>(null);\n    const history = useHistory();\n  \n    const queryData = useRecoilValue(queryDataState);    \n    const lastSetUrlRef = useRef<string|null>(null);\n    \n    useEffect(()=> {\n        const newUrl = getFreshUrl(queryData);\n        if(lastSetUrlRef.current !== newUrl){\n            lastSetUrlRef.current = newUrl;\n            history.replace(newUrl);\n        }\n     }, [queryData,history]);\n\n    useEffect(()=>{\n        if(companies === null){\n            (async () => {\n                try {\n                    setCompanies(await GetCompaniesAsync());\n                } catch(ex){\n                    HandleError(ex);\n                }\n            })();\n        }\n    }, [companies, setCompanies]);\n\n    if(companies === null){\n        return <LoadingComponent loadingText=\"იტვირთება კომპანიები...\"/>;\n    }\n\n    return <>\n        {companies.map(x=><CompanyItem company={x} key={x.key}/>)}\n        <ChartComponent/>\n        <MapComponent/>\n    </>\n}\n","import React from 'react'\nimport CompaniesListing from './components/CompaniesListing'\nimport './HomePage.css'\n\nexport default function HomePage(){\n\n    return <>\n        <h1 style={{padding:'20px'}}>საწვავი საქართველოში</h1>\n        <CompaniesListing/>\n    </>\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { RecoilRoot } from 'recoil';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <Router>\n        <Switch>\n          <Route path=\"*\">\n            <HomePage/>\n          </Route>\n        </Switch>\n      </Router>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}