{"version":3,"sources":["services/DataService.tsx","services/ErrorHandler.tsx","services/QueryHelper.tsx","pages/components/CompanyItem.tsx","pages/components/LoadingComponent.tsx","services/CompaniesAtom.tsx","pages/components/ChartComponent.tsx","pages/components/CompaniesListing.tsx","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getUrl","route","GetCompanyLogoUrl","companyKey","getAsync","a","url","fetch","response","ok","Error","json","data","HandleError","error","window","alert","DialogType","queryDataState","atom","key","default","parameters","URLSearchParams","location","search","cmp","get","dialog","dialogData","dlg","Boolean","splitted","split","length","Map","fuelKey","Chart","openedCompanyKeys","getQueryData","isCompanyOpenedSelector","selectorFamily","param","some","c","set","isOpen","x","Array","from","Set","filter","chartDataSelector","selector","newData","getSign","number","CompanyItem","props","company","useRecoilState","setIsOpen","collapseRef","useRef","collapseObjRef","isAnimatingRef","useEffect","current","addEventListener","collapse","Collapse","toggle","show","hide","setDisplayChart","useSetRecoilState","className","style","margin","onClick","alignItems","display","flexDirection","padding","justifyContent","cursor","src","alt","width","height","marginRight","name","type","backgroundColor","color","borderColor","title","marginLeft","ref","borderTop","scope","textAlign","fuels","map","f","i","price","toFixed","change","Math","abs","LoadingComponent","role","loadingText","CompaniesAtom","ChartComponent","chartData","setChartData","companies","useRecoilValue","modalRef","modal","Modal","getInstance","event","useState","allHistory","setAllHistory","chartKeyRef","chartKey","resp","find","fuel","data-bs-backdrop","data-bs-keyboard","tabIndex","aria-labelledby","aria-hidden","data-bs-dismiss","aria-label","CompaniesListing","setCompanies","history","useHistory","queryData","lastSetUrlRef","newUrl","searchParams","join","dialogParam","toString","getFreshUrl","push","HomePage","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04610198.chunk.js","sourcesContent":["import Company from \"../models/Company\";\nimport PricePoint from \"../models/PricePoint\";\n\nconst baseUrl = \"https://raw.githubusercontent.com/mister-giga/Fuel-Georgia/main\";\nconst getUrl = (route:string):string => `${baseUrl}/${route}`;\n\nexport function GetCompanyLogoUrl(companyKey:string){\n    return getUrl(`blob/${companyKey}.png`);\n}\n\nasync function getAsync<T> (route:string):Promise<T> {\n    const url = getUrl(route);\n    const response = await fetch(url);\n    if(!response.ok){\n        throw new Error('მოხდა შეცდომა');\n    }\n    const data = await response.json();\n    return data;\n}\n\nexport function GetCompaniesAsync() {\n    return getAsync<Company[]>(\"data/companies.json\");\n}\n\nexport function GetLocationsAsync(companyKey:string){\n    return getAsync<Location[]>(`data/${companyKey}/locations.json`);\n}\n\nexport function GetPriceChangesAsync(companyKey:string, fuelKey:string){\n    return getAsync<PricePoint[]>(`data/${companyKey}/priceChanges/${fuelKey}.json`);\n}","export default function HandleError(error:string){\n    window.alert(error);\n}","import { atom, selector, selectorFamily } from \"recoil\";\n\nexport interface MapDialogData{\n    companyKey:string\n}\nexport interface ChartDialogData extends MapDialogData {\n    fuelKey:string\n}\n\nexport enum DialogType { Map = 'map', Chart = 'chart' }\n\nexport interface QueryData {\n    openedCompanyKeys:string[],\n    dialog: DialogType|null,\n    dialogData: MapDialogData | ChartDialogData | null\n}\n\nfunction getQueryData():QueryData{\n    const parameters = new URLSearchParams(window.location.search);\n\n    const cmp = parameters.get('cmp');\n\n    let dialog : DialogType|null = null;\n    let dialogData : MapDialogData | ChartDialogData | null = null\n\n    const dlg = parameters.get('dlg');\n\n    if(Boolean(dlg)){\n        const splitted = dlg!.split('.');\n        if(splitted.length === 2 && splitted[0] === 'map'){\n            const companyKey = splitted[1];\n            if(Boolean(companyKey)){\n                dialog = DialogType.Map;\n                dialogData = {\n                    companyKey: companyKey\n                }\n            }\n        } else if(splitted.length === 3 && splitted[0] === 'chart'){\n            const companyKey = splitted[1];\n            const fuelKey = splitted[2];\n            if(Boolean(companyKey) && Boolean(fuelKey)){\n                dialog = DialogType.Chart;\n                dialogData = {\n                    companyKey: companyKey,\n                    fuelKey: fuelKey\n                }\n            }\n        }\n    }\n\n    return {\n        openedCompanyKeys: Boolean(cmp) ? cmp!.split('.') : [],\n        dialog: dialog,\n        dialogData: dialogData\n    }\n}\n\nexport function getFreshUrl(data:QueryData) {\n    var searchParams = new URLSearchParams(window.location.search);\n    searchParams.set(\"cmp\", data.openedCompanyKeys.join('.'));\n\n    let dialogParam = \"\";\n    if(data.dialog){\n        if(data.dialog === DialogType.Map){\n            dialogParam = `map.${data.dialogData?.companyKey}`;\n        } else if(data.dialog === DialogType.Chart){\n            dialogParam = `chart.${data.dialogData?.companyKey}.${(data.dialogData as ChartDialogData)?.fuelKey}`;\n        }\n    }\n    searchParams.set('dlg', dialogParam);\n\n    const url = \"?\" + searchParams.toString();\n    return url;\n}\n\n\nexport const queryDataState = atom<QueryData>({\n    key: 'queryDataState', \n    default: getQueryData(), \n});\n\nexport const isCompanyOpenedSelector = selectorFamily<boolean, string>({\n    key:'isCompanyOpenedSelector',\n    get: param => ({get})=> get(queryDataState).openedCompanyKeys.some(c=>c === param),\n    set: companyKey => ({get, set}, isOpen) => {\n        const x =  get(queryDataState);\n        set(queryDataState, {...x, openedCompanyKeys: isOpen ? Array.from(new Set([...x.openedCompanyKeys, companyKey])): x.openedCompanyKeys.filter(c=>c!== companyKey)});\n    }\n})\n\nexport const chartDataSelector = selector<ChartDialogData|null>({\n    key: 'chartDataSelector',\n    get: ({get}) => {\n        const data = get(queryDataState);\n        if(data.dialog === DialogType.Chart){\n            return data.dialogData as ChartDialogData;\n        }\n        return null;\n    },\n    set: ({get, set}, newData) => {\n        const data = get(queryDataState);\n        if(newData === null) {\n            set(queryDataState, {...data, dialog: null, dialogData: null})\n        } else {\n            set(queryDataState, {...data, dialog: DialogType.Chart, dialogData: newData as ChartDialogData});\n        }\n    }\n});\n\n// export const isDisplayingChartSelector = selectorFamily<boolean, {companyKey:string, fuelKey:string}>({\n//     key: 'isDisplayingChartSelector',\n//     get: param => ({get}) => {\n//         const data = get(queryDataState);\n//         if(data.dialog === DialogType.Chart){\n//             const dialogData = data.dialogData as ChartDialogData;\n//             if(dialogData.companyKey === param.companyKey && dialogData.fuelKey === param.fuelKey){\n//                 return true;\n//             }\n//         }\n//         return false;\n//     },\n//     set: chartData => ({get, set}, wantsToDisplay) => {\n//         const data = get(queryDataState);\n//         if(wantsToDisplay){\n//             set(queryDataState, {...data, dialog: DialogType.Chart, dialogData: chartData});\n//         } else {\n//             //maybe check if this is the one who opened chart?\n//             set(queryDataState, {...data, dialog: null, dialogData: null});\n//         }\n//     }\n// });","import { Collapse } from 'bootstrap';\nimport React, {  useEffect, useRef } from 'react'\nimport {  useRecoilState, useSetRecoilState } from 'recoil';\nimport Company from '../../models/Company';\nimport { GetCompanyLogoUrl } from '../../services/DataService';\nimport { chartDataSelector, isCompanyOpenedSelector } from '../../services/QueryHelper';\n\nfunction getSign(number:number){\n    if(number>0)\n        return '+';\n    if(number<0)\n        return '-';\n    return '';\n}\nfunction getBadgeClass(number:number){\n    if(number>0)\n        return 'bg-danger';\n    if(number<0)\n        return 'bg-success';\n    return 'bg-secondary';\n}\n\nexport default function CompanyItem(props:{company:Company}){\n    const { company } = props;\n    const [isOpen, setIsOpen] = useRecoilState(isCompanyOpenedSelector(company.key));\n    \n    const collapseRef = useRef<HTMLDivElement|null>(null);\n    const collapseObjRef = useRef<Collapse|null>(null);\n    const isAnimatingRef = useRef<boolean>(false);\n    useEffect(()=>{\n        if(collapseRef.current){\n            if(collapseObjRef.current === null){\n                collapseRef.current.addEventListener('shown.bs.collapse', function () {\n                    isAnimatingRef.current = false;\n                });\n                collapseRef.current.addEventListener('hidden.bs.collapse', function () {\n                    isAnimatingRef.current = false;\n                });\n                collapseRef.current.addEventListener('show.bs.collapse', function () {\n                    isAnimatingRef.current = true;\n                });\n                collapseRef.current.addEventListener('hide.bs.collapse', function () {\n                    isAnimatingRef.current = true;\n                });\n                const collapse = collapseObjRef.current ?? new Collapse(collapseRef.current, { toggle: isOpen });\n                collapseObjRef.current = collapse;\n            } else {\n                const collapse = collapseObjRef.current;\n                if(isOpen){\n                    collapse.show();\n                } else {\n                    collapse.hide();\n                }\n            }            \n        }\n    },[isOpen]);\n\n    const setDisplayChart = useSetRecoilState(chartDataSelector);\n\n    const onOpenClose = () => !isAnimatingRef.current && setIsOpen(x=>!x);\n\n    return (\n        <div className=\"card mb-3\" style={{ margin:'10px' }}>\n            \n            <div onClick={onOpenClose} style={{alignItems:'center', display:'flex', flexDirection:'row', padding:'16px', justifyContent:'space-between', cursor:'pointer'}}>\n                <div style={{display:'flex', flexDirection:'row', alignItems:'center'}}>\n                    <img src={GetCompanyLogoUrl(company.key)} alt={`${company.key} logo`} width='50' height='50' style={{marginRight:'16px'}}/>\n                    <h3 style={{padding:'0'}}>{company.name}</h3>\n                </div>\n                <div style={{display:'flex', flexDirection:'row', alignItems:'center'}}>\n                    <button type=\"button\" className=\"btn btn-primary\" style={{backgroundColor:company.color, borderColor:company.color, marginRight:'10px'}} title='რუკა'><i className=\"fas fa-map-marked-alt\"></i></button>\n                    <i className={`fas fa-chevron-${isOpen ? 'up' : 'down'}`} style={{marginLeft:'10px', marginRight:'10px'}}></i>\n                </div>\n            </div>\n            \n            <div ref={collapseRef} className='collapse'>\n                <table className=\"table table-striped table-hover\" style={{borderTop:'1px solid rgba(0,0,0,.125)'}}>\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">საწვავი</th>\n                            <th scope=\"col\">ფასი</th>\n                            <th scope=\"col\" style={{textAlign:'center'}}>+/-</th>\n                            <th scope=\"col\"></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {company.fuels.map((f,i)=> (\n                            <tr key={f.key}>\n                                <th scope=\"row\">{i+1}</th>\n                                <td>{f.name}</td>\n                                <td>{f.price.toFixed(2)}</td>\n                                <td style={{textAlign:'center'}}><span className={`badge ${getBadgeClass(f.change)}`}>{getSign(f.change)}{Math.abs(f.change).toFixed(2)}</span></td>\n                                <td style={{textAlign:'end'}}><button type=\"button\" onClick={()=>setDisplayChart({companyKey:company.key, fuelKey:f.key})} className=\"btn btn-sm btn-secondary\" title='ისტორიის გრაფიკულად ნახვა'><i className=\"fas fa-chart-line\"></i></button></td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n}","import React from 'react'\n\nexport default function LoadingComponent(props:{loadingText:string}){\n    return (\n        <div className=\"horizontallyCentered\">\n            <div className=\"spinner-border text-success\" role=\"status\">\n                <span className=\"visually-hidden\"></span>\n            </div>\n            <p className=\"lead\">{props.loadingText}</p>\n        </div>\n    );\n}","import { atom } from \"recoil\";\nimport Company from '../models/Company';\n\nexport const CompaniesAtom = atom<Company[]|null>({\n    key: \"companiesAtom\",\n    default: null\n});\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { chartDataSelector } from '../../services/QueryHelper'\nimport { Modal } from 'bootstrap'\nimport { CompaniesAtom } from '../../services/CompaniesAtom';\nimport { GetCompanyLogoUrl, GetPriceChangesAsync } from '../../services/DataService';\nimport PricePoint from '../../models/PricePoint';\nimport LoadingComponent from './LoadingComponent';\nimport HandleError from '../../services/ErrorHandler';\n\nexport default function ChartComponent(){\n    const [chartData, setChartData] = useRecoilState(chartDataSelector);\n    const companies = useRecoilValue(CompaniesAtom);\n\n    const modalRef = useRef<HTMLDivElement>(null);\n\n    useEffect(()=>{\n        if(chartData !== null && modalRef.current !== null && companies !== null){\n            let modal = Modal.getInstance(modalRef.current, {  });\n            if(modal === null){\n                modal = new Modal(modalRef.current);\n                modalRef.current.addEventListener('hidden.bs.modal', function (event) {\n                    setChartData(null);\n                });\n            } \n            modal.show();\n        }\n    },[chartData, setChartData, companies]);\n\n    const [allHistory, setAllHistory] = useState<PricePoint[]|null>(null);\n    const chartKeyRef = useRef<string|null>(null);\n\n    useEffect(()=>{\n        const chartKey = chartData === null ? null : `${chartData.companyKey}.${chartData.fuelKey}`;\n        chartKeyRef.current = chartKey;\n        if(chartKey !== null){\n            (async () => {\n                try {\n                    const resp = await GetPriceChangesAsync(chartData!.companyKey, chartData!.fuelKey);\n                    if(resp?.length && chartKey === chartKeyRef.current){\n                        setAllHistory(resp);\n                    }\n                } catch (ex){\n                    HandleError(ex);\n                }\n            })();\n        } else {\n            setAllHistory(null);\n        }\n    }, [chartData]);\n\n    const company = companies?.find(c=>c.key === chartData?.companyKey);\n    const fuel = company?.fuels?.find(c=>c.key === chartData?.fuelKey);\n    if(!Boolean(fuel)){\n        return <></>;\n    }\n\n    \n\n    return (\n        <div className=\"modal fade\" ref={modalRef} data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabIndex={-1} aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-fullscreen\"> \n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h3 className=\"modal-title\">\n                            <img src={GetCompanyLogoUrl(company!.key)} alt={`${company!.key} logo`} width='50' height='50' style={{marginRight:'16px'}}/>\n                            {`${company?.name} - ${fuel?.name}`}\n                        </h3>\n                        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div className=\"modal-body\">\n                        { allHistory === null ? <LoadingComponent loadingText='იტვირთება საწვავის ისტორია...'/> : (\n                            <p>{allHistory.length}</p>\n                        ) }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React, { useEffect, useRef } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { GetCompaniesAsync } from '../../services/DataService';\nimport HandleError from '../../services/ErrorHandler';\nimport { getFreshUrl, queryDataState } from '../../services/QueryHelper';\nimport CompanyItem from './CompanyItem';\nimport LoadingComponent from './LoadingComponent';\nimport ChartComponent from './ChartComponent'\nimport { CompaniesAtom } from '../../services/CompaniesAtom'\n\nexport default function CompaniesListing(){\n    const [companies, setCompanies] = useRecoilState(CompaniesAtom);// useState<Company[]|null>(null);\n    const history = useHistory();\n  \n    const queryData = useRecoilValue(queryDataState);    \n    const lastSetUrlRef = useRef<string|null>(null);\n    \n    useEffect(()=> {\n        const newUrl = getFreshUrl(queryData);\n        if(lastSetUrlRef.current !== newUrl){\n            lastSetUrlRef.current = newUrl;\n            history.push(newUrl);\n        }\n     }, [queryData,history]);\n\n    useEffect(()=>{\n        if(companies === null){\n            (async () => {\n                try {\n                    setCompanies(await GetCompaniesAsync());\n                } catch(ex){\n                    HandleError(ex);\n                }\n            })();\n        }\n    }, [companies, setCompanies]);\n\n    if(companies === null){\n        return <LoadingComponent loadingText=\"იტვირთება კომპანიები...\"/>;\n    }\n\n    return <>\n        {companies.map(x=><CompanyItem company={x} key={x.key}/>)}\n        <ChartComponent/>\n    </>\n}","import React from 'react'\nimport CompaniesListing from './components/CompaniesListing'\nimport './HomePage.css'\n\nexport default function HomePage(){\n\n    return <>\n        <h1 style={{padding:'20px'}}>საწვავი საქართველოში</h1>\n        <CompaniesListing/>\n    </>\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { RecoilRoot } from 'recoil';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <Router>\n        <Switch>\n          <Route path=\"*\">\n            <HomePage/>\n          </Route>\n        </Switch>\n      </Router>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}